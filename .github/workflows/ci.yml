on: push

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test (OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}})
    strategy:
      matrix:
        otp: ['25']
        elixir: ['1.14.2']
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      - run: cd day1/kv_store && mix deps.get
      - run: cd day1/kv_store && mix test

  dialyzer:
    runs-on: ubuntu-latest
    name: Dialyzer (OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}})
    strategy:
      matrix:
        otp: ['25']
        elixir: ['1.14.2']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.14.2" # Define the elixir version
          otp-version: "25" # Define the OTP version

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache@v2
        id: plt_cache
        with:
          key: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            priv/plts

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: cd day1/kv_store && mix deps.get && mix dialyzer --plt

      - name: Run dialyzer
        run: cd day1/kv_store && mix deps.get && mix dialyzer --format github
